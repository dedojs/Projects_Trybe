{"ast":null,"code":"var _jsxFileName = \"/home/andre/trybe_projects/sd-019-c-project-trybewallet/src/components/FormExpenses.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionExpense, actionFetchCurrencies } from '../actions';\nimport fetchCurrency from '../services/Api';\n\nclass FormExpenses extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      this.refreshRates();\n      this.getCurrencyFromApi();\n    };\n\n    this.getCurrencyFromApi = async () => {\n      this.setState({\n        isLoading: true\n      });\n      const {\n        currenciesGlobal\n      } = this.props;\n      await currenciesGlobal({});\n      this.setState({\n        isLoading: false\n      });\n    };\n\n    this.handleForm = _ref => {\n      let {\n        target\n      } = _ref;\n      const {\n        name,\n        value\n      } = target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.refreshRates = async () => {\n      const rates = await fetchCurrency();\n      this.setState({\n        exchangeRates: rates\n      });\n    };\n\n    this.saveInfo = () => {\n      this.refreshRates();\n      const {\n        walletExpenses\n      } = this.props;\n      this.setState(prev => ({\n        id: prev.id + 1\n      }));\n      walletExpenses(this.state);\n      this.setState({\n        value: '',\n        currency: '',\n        method: '',\n        tag: '',\n        description: ''\n      });\n    };\n\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '' // data: '',\n\n    };\n  }\n\n  render() {\n    const {\n      currencies\n    } = this.props;\n    const {\n      currency,\n      description,\n      value,\n      method,\n      tag\n    } = this.state;\n    const arrayTipos = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"formExpensesContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"value\",\n      \"data-testid\": \"value-input\",\n      onChange: this.handleForm,\n      value: value,\n      placeholder: \"Valor da despesa\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"description\",\n      \"data-testid\": \"description-input\",\n      onChange: this.handleForm,\n      value: description,\n      placeholder: \"Descri\\xE7\\xE3o da despesa\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"select\", {\n      type: \"text\",\n      name: \"method\",\n      \"data-testid\": \"method-input\",\n      onChange: this.handleForm,\n      value: method,\n      placeholder: \"M\\xE9todo de Pagamento\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }, \"Escolha a forma de pagamento\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Dinheiro\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, \"Dinheiro\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Cart\\xE3o de cr\\xE9dito\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, \"Cart\\xE3o de cr\\xE9dito\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Cart\\xE3o de d\\xE9bito\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, \"Cart\\xE3o de d\\xE9bito\")), /*#__PURE__*/React.createElement(\"select\", {\n      type: \"text\",\n      name: \"tag\",\n      onChange: this.handleForm,\n      value: tag,\n      placeholder: \"Tipo de Despesa\",\n      \"data-testid\": \"tag-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, \"Escolha o tipo de despesa\"), arrayTipos.map((tipo, index) => /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: tipo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }\n    }, tipo))), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"coin-select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, \"Moeda:\", /*#__PURE__*/React.createElement(\"select\", {\n      id: \"coin-select\",\n      name: \"currency\",\n      value: currency,\n      onChange: this.handleForm,\n      label: \"Moeda\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, currencies.map((item, index) => /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, item)))), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.saveInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, \"Adicionar despesa\"));\n  }\n\n}\n\nFormExpenses.propTypes = {\n  currencies: PropTypes.string\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  currencies: state.wallet.currencies,\n  wallet: state.wallet\n});\n\nconst mapDispatchToProps = dispatch => ({\n  walletExpenses: state => dispatch(actionExpense(state)),\n  currenciesGlobal: () => dispatch(actionFetchCurrencies())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormExpenses);","map":{"version":3,"sources":["/home/andre/trybe_projects/sd-019-c-project-trybewallet/src/components/FormExpenses.js"],"names":["React","PropTypes","connect","actionExpense","actionFetchCurrencies","fetchCurrency","FormExpenses","Component","constructor","props","componentDidMount","refreshRates","getCurrencyFromApi","setState","isLoading","currenciesGlobal","handleForm","target","name","value","rates","exchangeRates","saveInfo","walletExpenses","prev","id","state","currency","method","tag","description","render","currencies","arrayTipos","map","tipo","index","item","propTypes","string","isRequired","mapStateToProps","wallet","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionExpense, actionFetchCurrencies  } from '../actions';\nimport fetchCurrency from '../services/Api';\n\nclass FormExpenses extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n      // data: '',\n    };\n  }\n\n  componentDidMount = async () => {\n    this.refreshRates();\n    this.getCurrencyFromApi();\n  }\n\n  getCurrencyFromApi = async () => {\n    this.setState({ isLoading: true });\n    const { currenciesGlobal } = this.props;\n    await currenciesGlobal({});\n    this.setState({ isLoading: false });\n  }\n\n  handleForm = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  refreshRates = async () => {\n    const rates = await fetchCurrency();\n    this.setState({ exchangeRates: rates });\n  }\n\n  saveInfo = () => {\n    this.refreshRates();\n    const { walletExpenses } = this.props;\n    this.setState((prev) => ({\n      id: prev.id + 1,\n    }));\n    walletExpenses(this.state);\n    this.setState({\n      value: '',\n      currency: '',\n      method: '',\n      tag: '',\n      description: '',\n    });\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const { currency, description, value, method, tag } = this.state;\n    const arrayTipos = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    return (\n      <form className=\"formExpensesContainer\">\n        {/*\n        <input\n          type=\"date\"\n          name=\"data\"\n          onChange={ this.handleForm }\n          value={ data }\n          placeholder=\"Data\"\n        />\n        */}\n        <input\n          type=\"number\"\n          name=\"value\"\n          data-testid=\"value-input\"\n          onChange={ this.handleForm }\n          value={ value }\n          placeholder=\"Valor da despesa\"\n        />\n        <input\n          type=\"text\"\n          name=\"description\"\n          data-testid=\"description-input\"\n          onChange={ this.handleForm }\n          value={ description }\n          placeholder=\"Descrição da despesa\"\n        />\n        <select\n          type=\"text\"\n          name=\"method\"\n          data-testid=\"method-input\"\n          onChange={ this.handleForm }\n          value={ method }\n          placeholder=\"Método de Pagamento\"\n        >\n          <option>Escolha a forma de pagamento</option>\n          <option value=\"Dinheiro\">Dinheiro</option>\n          <option value=\"Cartão de crédito\">Cartão de crédito</option>\n          <option value=\"Cartão de débito\">Cartão de débito</option>\n        </select>\n        <select\n          type=\"text\"\n          name=\"tag\"\n          onChange={ this.handleForm }\n          value={ tag }\n          placeholder=\"Tipo de Despesa\"\n          data-testid=\"tag-input\"\n        >\n          <option>Escolha o tipo de despesa</option>\n          {\n            arrayTipos.map((tipo, index) => (\n              <option key={ index } value={ tipo }>{tipo}</option>\n            ))\n          }\n        </select>\n        <label htmlFor=\"coin-select\">\n          Moeda:\n          <select\n            id=\"coin-select\"\n            name=\"currency\"\n            value={ currency }\n            onChange={ this.handleForm }\n            label=\"Moeda\"\n          >\n            {\n              currencies.map((item, index) => (\n                <option key={ index } value={ item }>{item}</option>\n              ))\n            }\n          </select>\n        </label>\n        <button\n          type=\"button\"\n          onClick={ this.saveInfo }\n        >\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nFormExpenses.propTypes = {\n  currencies: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  wallet: state.wallet,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  walletExpenses: (state) => dispatch(actionExpense(state)),\n  currenciesGlobal: () => dispatch(actionFetchCurrencies()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormExpenses);\n"]},"metadata":{},"sourceType":"module"}