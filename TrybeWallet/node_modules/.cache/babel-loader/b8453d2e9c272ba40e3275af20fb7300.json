{"ast":null,"code":"var _jsxFileName = \"/home/andre/trybe_projects/sd-019-c-project-trybewallet/src/components/FormExpenses.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionExpense, actionFetchCurrencies, actionDeleteExpense, actionIsEdit } from '../actions';\nimport fetchCurrency from '../services/Api';\n\nclass FormExpenses extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      await this.getCurrencyFromApi();\n      this.verifyEdit();\n    };\n\n    this.getCurrencyFromApi = async () => {\n      const {\n        currenciesGlobal\n      } = this.props;\n      await currenciesGlobal();\n      const {\n        wallet: {\n          wallet\n        }\n      } = this.props;\n      this.setState({\n        exchangeRates: wallet\n      });\n    };\n\n    this.handleForm = _ref => {\n      let {\n        target\n      } = _ref;\n      const {\n        name,\n        value\n      } = target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.refreshRates = async () => {\n      const fetch = await fetchCurrency();\n      this.setState({\n        exchangeRates: fetch\n      });\n    };\n\n    this.verifyEdit = () => {\n      const {\n        wallet: {\n          isEdit\n        }\n      } = this.props;\n\n      if (isEdit === true) {\n        const {\n          idEstado\n        } = this.props;\n        this.setState({\n          id: idEstado.id,\n          value: idEstado.value,\n          description: idEstado.description,\n          currency: idEstado.currency,\n          method: idEstado.method,\n          tag: idEstado.tag\n        });\n      }\n    };\n\n    this.saveInfo = () => {\n      this.refreshRates();\n      const {\n        walletExpenses,\n        wallet\n      } = this.props;\n      walletExpenses(this.state);\n      const ids = wallet.expenses.map(item => item.id);\n      const lastId = ids.length - 1;\n      /*\n      if (lastId < 0) {\n        this.setState((prev) => ({ id: prev.id + 1 }));\n      } else {\n        this.setState(() => ({ id: lastId + 1 }));\n      }\n      */\n\n      console.log(lastId);\n      this.setState(prev => ({\n        id: prev.id + 1,\n        value: 0,\n        currency: 'USD',\n        method: '',\n        tag: '',\n        description: ''\n      }));\n    };\n\n    this.saveEditInfo = () => {\n      const {\n        walletExpenses,\n        deleteExpense,\n        wallet,\n        isEdit\n      } = this.props;\n      const teste = wallet.expenses.filter(item => item !== wallet.id);\n      deleteExpense(teste);\n      walletExpenses(this.state);\n      isEdit(false); // Number(prev.id) + 1\n    };\n\n    this.state = {\n      id: 0,\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: '',\n      tag: ''\n    };\n  }\n\n  render() {\n    const {\n      currencies\n    } = this.props;\n    const {\n      currency,\n      description,\n      value,\n      method,\n      tag\n    } = this.state;\n    const arrayTipos = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"formExpensesContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"value\",\n      \"data-testid\": \"value-input\",\n      onChange: this.handleForm,\n      value: value,\n      placeholder: \"Valor da despesa\",\n      min: \"0.00\",\n      max: \"10000000.00\",\n      step: \"0.01\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"description\",\n      \"data-testid\": \"description-input\",\n      onChange: this.handleForm,\n      value: description,\n      placeholder: \"Descri\\xE7\\xE3o da despesa\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"select\", {\n      type: \"text\",\n      name: \"method\",\n      \"data-testid\": \"method-input\",\n      onChange: this.handleForm,\n      value: method,\n      placeholder: \"M\\xE9todo de Pagamento\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }, \"Escolha a forma de pagamento\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Dinheiro\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }, \"Dinheiro\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Cart\\xE3o de cr\\xE9dito\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, \"Cart\\xE3o de cr\\xE9dito\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Cart\\xE3o de d\\xE9bito\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    }, \"Cart\\xE3o de d\\xE9bito\")), /*#__PURE__*/React.createElement(\"select\", {\n      type: \"text\",\n      name: \"tag\",\n      onChange: this.handleForm,\n      value: tag,\n      placeholder: \"Tipo de Despesa\",\n      \"data-testid\": \"tag-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }, \"Escolha o tipo de despesa\"), arrayTipos.map((tipo, index) => /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: tipo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }\n    }, tipo))), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"coin-select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, \"Moeda:\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"currency-input\",\n      id: \"coin-select\",\n      name: \"currency\",\n      value: currency,\n      onChange: this.handleForm,\n      label: \"Moeda\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, currencies.map((item, index) => /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    }, item)))), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.saveInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }, \"Adicionar despesa\"));\n  }\n\n}\n\nFormExpenses.propTypes = {\n  currencies: PropTypes.string\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  wallet: state.wallet,\n  currencies: state.wallet.currencies,\n  idEstado: state.wallet.id\n});\n\nconst mapDispatchToProps = dispatch => ({\n  walletExpenses: state => dispatch(actionExpense(state)),\n  currenciesGlobal: () => dispatch(actionFetchCurrencies()),\n  deleteExpense: state => dispatch(actionDeleteExpense(state)),\n  isEdit: isedit => dispatch(actionIsEdit(isedit))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormExpenses);","map":{"version":3,"sources":["/home/andre/trybe_projects/sd-019-c-project-trybewallet/src/components/FormExpenses.js"],"names":["React","PropTypes","connect","actionExpense","actionFetchCurrencies","actionDeleteExpense","actionIsEdit","fetchCurrency","FormExpenses","Component","constructor","props","componentDidMount","getCurrencyFromApi","verifyEdit","currenciesGlobal","wallet","setState","exchangeRates","handleForm","target","name","value","refreshRates","fetch","isEdit","idEstado","id","description","currency","method","tag","saveInfo","walletExpenses","state","ids","expenses","map","item","lastId","length","console","log","prev","saveEditInfo","deleteExpense","teste","filter","render","currencies","arrayTipos","tipo","index","propTypes","string","isRequired","mapStateToProps","mapDispatchToProps","dispatch","isedit"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,EAAwBC,qBAAxB,EACEC,mBADF,EACuBC,YADvB,QAC2C,YAD3C;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,MAAMC,YAAN,SAA2BR,KAAK,CAACS,SAAjC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAYnBC,iBAZmB,GAYC,YAAY;AAC9B,YAAM,KAAKC,kBAAL,EAAN;AACA,WAAKC,UAAL;AACD,KAfkB;;AAAA,SAiBnBD,kBAjBmB,GAiBE,YAAY;AAC/B,YAAM;AAAEE,QAAAA;AAAF,UAAuB,KAAKJ,KAAlC;AACA,YAAMI,gBAAgB,EAAtB;AAEA,YAAM;AAAEC,QAAAA,MAAM,EAAE;AAAEA,UAAAA;AAAF;AAAV,UAAyB,KAAKL,KAApC;AACA,WAAKM,QAAL,CAAc;AAAEC,QAAAA,aAAa,EAAEF;AAAjB,OAAd;AACD,KAvBkB;;AAAA,SAyBnBG,UAzBmB,GAyBN,QAAgB;AAAA,UAAf;AAAEC,QAAAA;AAAF,OAAe;AAC3B,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBF,MAAxB;AACA,WAAKH,QAAL,CAAc;AAAE,SAACI,IAAD,GAAQC;AAAV,OAAd;AACD,KA5BkB;;AAAA,SA8BnBC,YA9BmB,GA8BJ,YAAY;AACzB,YAAMC,KAAK,GAAG,MAAMjB,aAAa,EAAjC;AACA,WAAKU,QAAL,CAAc;AAAEC,QAAAA,aAAa,EAAEM;AAAjB,OAAd;AACD,KAjCkB;;AAAA,SAmCnBV,UAnCmB,GAmCN,MAAM;AACjB,YAAM;AAAEE,QAAAA,MAAM,EAAE;AAAES,UAAAA;AAAF;AAAV,UAAyB,KAAKd,KAApC;;AACA,UAAIc,MAAM,KAAK,IAAf,EAAqB;AACnB,cAAM;AAAEC,UAAAA;AAAF,YAAe,KAAKf,KAA1B;AACA,aAAKM,QAAL,CAAc;AACZU,UAAAA,EAAE,EAAED,QAAQ,CAACC,EADD;AAEZL,UAAAA,KAAK,EAAEI,QAAQ,CAACJ,KAFJ;AAGZM,UAAAA,WAAW,EAAEF,QAAQ,CAACE,WAHV;AAIZC,UAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAJP;AAKZC,UAAAA,MAAM,EAAEJ,QAAQ,CAACI,MALL;AAMZC,UAAAA,GAAG,EAAEL,QAAQ,CAACK;AANF,SAAd;AAQD;AACF,KAhDkB;;AAAA,SAkDnBC,QAlDmB,GAkDR,MAAM;AACf,WAAKT,YAAL;AACA,YAAM;AAAEU,QAAAA,cAAF;AAAkBjB,QAAAA;AAAlB,UAA6B,KAAKL,KAAxC;AACAsB,MAAAA,cAAc,CAAC,KAAKC,KAAN,CAAd;AACA,YAAMC,GAAG,GAAGnB,MAAM,CAACoB,QAAP,CAAgBC,GAAhB,CAAqBC,IAAD,IAAWA,IAAI,CAACX,EAApC,CAAZ;AACA,YAAMY,MAAM,GAAGJ,GAAG,CAACK,MAAJ,GAAa,CAA5B;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,WAAKtB,QAAL,CAAe0B,IAAD,KAAW;AACvBhB,QAAAA,EAAE,EAAEgB,IAAI,CAAChB,EAAL,GAAU,CADS;AAEvBL,QAAAA,KAAK,EAAE,CAFgB;AAGvBO,QAAAA,QAAQ,EAAE,KAHa;AAIvBC,QAAAA,MAAM,EAAE,EAJe;AAKvBC,QAAAA,GAAG,EAAE,EALkB;AAMvBH,QAAAA,WAAW,EAAE;AANU,OAAX,CAAd;AAQD,KAxEkB;;AAAA,SA0EnBgB,YA1EmB,GA0EJ,MAAM;AACnB,YAAM;AAAEX,QAAAA,cAAF;AAAkBY,QAAAA,aAAlB;AAAiC7B,QAAAA,MAAjC;AAAyCS,QAAAA;AAAzC,UAAoD,KAAKd,KAA/D;AACA,YAAMmC,KAAK,GAAG9B,MAAM,CAACoB,QAAP,CAAgBW,MAAhB,CAAwBT,IAAD,IAAUA,IAAI,KAAKtB,MAAM,CAACW,EAAjD,CAAd;AACAkB,MAAAA,aAAa,CAACC,KAAD,CAAb;AACAb,MAAAA,cAAc,CAAC,KAAKC,KAAN,CAAd;AACAT,MAAAA,MAAM,CAAC,KAAD,CAAN,CALmB,CAMnB;AACD,KAjFkB;;AAEjB,SAAKS,KAAL,GAAa;AACXP,MAAAA,EAAE,EAAE,CADO;AAEXL,MAAAA,KAAK,EAAE,CAFI;AAGXM,MAAAA,WAAW,EAAE,EAHF;AAIXC,MAAAA,QAAQ,EAAE,KAJC;AAKXC,MAAAA,MAAM,EAAE,EALG;AAMXC,MAAAA,GAAG,EAAE;AANM,KAAb;AAQD;;AAyEDiB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAiB,KAAKtC,KAA5B;AACA,UAAM;AAAEkB,MAAAA,QAAF;AAAYD,MAAAA,WAAZ;AAAyBN,MAAAA,KAAzB;AAAgCQ,MAAAA,MAAhC;AAAwCC,MAAAA;AAAxC,QAAgD,KAAKG,KAA3D;AACA,UAAMgB,UAAU,GAAG,CAAC,aAAD,EAAgB,OAAhB,EAAyB,UAAzB,EAAqC,YAArC,EAAmD,OAAnD,CAAnB;AACA,wBACE;AAAM,MAAA,SAAS,EAAC,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,qBAAY,aAHd;AAIE,MAAA,QAAQ,EAAG,KAAK/B,UAJlB;AAKE,MAAA,KAAK,EAAGG,KALV;AAME,MAAA,WAAW,EAAC,kBANd;AAOE,MAAA,GAAG,EAAC,MAPN;AAQE,MAAA,GAAG,EAAC,aARN;AASE,MAAA,IAAI,EAAC,MATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAYE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,qBAAY,mBAHd;AAIE,MAAA,QAAQ,EAAG,KAAKH,UAJlB;AAKE,MAAA,KAAK,EAAGS,WALV;AAME,MAAA,WAAW,EAAC,4BANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,eAoBE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,qBAAY,cAHd;AAIE,MAAA,QAAQ,EAAG,KAAKT,UAJlB;AAKE,MAAA,KAAK,EAAGW,MALV;AAME,MAAA,WAAW,EAAC,wBANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCARF,eASE;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATF,eAUE;AAAQ,MAAA,KAAK,EAAC,yBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAVF,eAWE;AAAQ,MAAA,KAAK,EAAC,wBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAXF,CApBF,eAiCE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,IAAI,EAAC,KAFP;AAGE,MAAA,QAAQ,EAAG,KAAKX,UAHlB;AAIE,MAAA,KAAK,EAAGY,GAJV;AAKE,MAAA,WAAW,EAAC,iBALd;AAME,qBAAY,WANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCARF,EAUImB,UAAU,CAACb,GAAX,CAAe,CAACc,IAAD,EAAOC,KAAP,kBACb;AACE,MAAA,GAAG,EAAGA,KADR;AAEE,MAAA,KAAK,EAAGD,IAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIGA,IAJH,CADF,CAVJ,CAjCF,eAqDE;AAAO,MAAA,OAAO,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAEE;AACE,qBAAY,gBADd;AAEE,MAAA,EAAE,EAAC,aAFL;AAGE,MAAA,IAAI,EAAC,UAHP;AAIE,MAAA,KAAK,EAAGtB,QAJV;AAKE,MAAA,QAAQ,EAAG,KAAKV,UALlB;AAME,MAAA,KAAK,EAAC,OANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASI8B,UAAU,CAACZ,GAAX,CAAe,CAACC,IAAD,EAAOc,KAAP,kBACb;AAAQ,MAAA,GAAG,EAAGA,KAAd;AAAsB,MAAA,KAAK,EAAGd,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsCA,IAAtC,CADF,CATJ,CAFF,CArDF,eAsEE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,OAAO,EAAG,KAAKN,QAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAtEF,CADF;AA+ED;;AAvKwC;;AA0K3CxB,YAAY,CAAC6C,SAAb,GAAyB;AACvBJ,EAAAA,UAAU,EAAEhD,SAAS,CAACqD;AADC,EAEvBC,UAFF;;AAIA,MAAMC,eAAe,GAAItB,KAAD,KAAY;AAClClB,EAAAA,MAAM,EAAEkB,KAAK,CAAClB,MADoB;AAElCiC,EAAAA,UAAU,EAAEf,KAAK,CAAClB,MAAN,CAAaiC,UAFS;AAGlCvB,EAAAA,QAAQ,EAAEQ,KAAK,CAAClB,MAAN,CAAaW;AAHW,CAAZ,CAAxB;;AAMA,MAAM8B,kBAAkB,GAAIC,QAAD,KAAe;AACxCzB,EAAAA,cAAc,EAAGC,KAAD,IAAWwB,QAAQ,CAACvD,aAAa,CAAC+B,KAAD,CAAd,CADK;AAExCnB,EAAAA,gBAAgB,EAAE,MAAM2C,QAAQ,CAACtD,qBAAqB,EAAtB,CAFQ;AAGxCyC,EAAAA,aAAa,EAAGX,KAAD,IAAWwB,QAAQ,CAACrD,mBAAmB,CAAC6B,KAAD,CAApB,CAHM;AAIxCT,EAAAA,MAAM,EAAGkC,MAAD,IAAYD,QAAQ,CAACpD,YAAY,CAACqD,MAAD,CAAb;AAJY,CAAf,CAA3B;;AAOA,eAAezD,OAAO,CAACsD,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CjD,YAA7C,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionExpense, actionFetchCurrencies,\n  actionDeleteExpense, actionIsEdit } from '../actions';\nimport fetchCurrency from '../services/Api';\n\nclass FormExpenses extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: 0,\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: '',\n      tag: '',\n    };\n  }\n\n  componentDidMount = async () => {\n    await this.getCurrencyFromApi();\n    this.verifyEdit();\n  }\n\n  getCurrencyFromApi = async () => {\n    const { currenciesGlobal } = this.props;\n    await currenciesGlobal();\n\n    const { wallet: { wallet } } = this.props;\n    this.setState({ exchangeRates: wallet });\n  }\n\n  handleForm = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  refreshRates = async () => {\n    const fetch = await fetchCurrency();\n    this.setState({ exchangeRates: fetch });\n  }\n\n  verifyEdit = () => {\n    const { wallet: { isEdit } } = this.props;\n    if (isEdit === true) {\n      const { idEstado } = this.props;\n      this.setState({\n        id: idEstado.id,\n        value: idEstado.value,\n        description: idEstado.description,\n        currency: idEstado.currency,\n        method: idEstado.method,\n        tag: idEstado.tag,\n      });\n    }\n  }\n\n  saveInfo = () => {\n    this.refreshRates();\n    const { walletExpenses, wallet } = this.props;\n    walletExpenses(this.state);\n    const ids = wallet.expenses.map((item) => (item.id));\n    const lastId = ids.length - 1;\n    /*\n    if (lastId < 0) {\n      this.setState((prev) => ({ id: prev.id + 1 }));\n    } else {\n      this.setState(() => ({ id: lastId + 1 }));\n    }\n    */\n    console.log(lastId);\n    this.setState((prev) => ({\n      id: prev.id + 1,\n      value: 0,\n      currency: 'USD',\n      method: '',\n      tag: '',\n      description: '',\n    }));\n  }\n\n  saveEditInfo = () => {\n    const { walletExpenses, deleteExpense, wallet, isEdit } = this.props;\n    const teste = wallet.expenses.filter((item) => item !== wallet.id);\n    deleteExpense(teste);\n    walletExpenses(this.state);\n    isEdit(false);\n    // Number(prev.id) + 1\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const { currency, description, value, method, tag } = this.state;\n    const arrayTipos = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    return (\n      <form className=\"formExpensesContainer\">\n        <input\n          type=\"number\"\n          name=\"value\"\n          data-testid=\"value-input\"\n          onChange={ this.handleForm }\n          value={ value }\n          placeholder=\"Valor da despesa\"\n          min=\"0.00\"\n          max=\"10000000.00\"\n          step=\"0.01\"\n        />\n        <input\n          type=\"text\"\n          name=\"description\"\n          data-testid=\"description-input\"\n          onChange={ this.handleForm }\n          value={ description }\n          placeholder=\"Descrição da despesa\"\n        />\n        <select\n          type=\"text\"\n          name=\"method\"\n          data-testid=\"method-input\"\n          onChange={ this.handleForm }\n          value={ method }\n          placeholder=\"Método de Pagamento\"\n        >\n          <option>Escolha a forma de pagamento</option>\n          <option value=\"Dinheiro\">Dinheiro</option>\n          <option value=\"Cartão de crédito\">Cartão de crédito</option>\n          <option value=\"Cartão de débito\">Cartão de débito</option>\n        </select>\n        <select\n          type=\"text\"\n          name=\"tag\"\n          onChange={ this.handleForm }\n          value={ tag }\n          placeholder=\"Tipo de Despesa\"\n          data-testid=\"tag-input\"\n        >\n          <option>Escolha o tipo de despesa</option>\n          {\n            arrayTipos.map((tipo, index) => (\n              <option\n                key={ index }\n                value={ tipo }\n              >\n                {tipo}\n              </option>\n            ))\n          }\n        </select>\n        <label htmlFor=\"coin-select\">\n          Moeda:\n          <select\n            data-testid=\"currency-input\"\n            id=\"coin-select\"\n            name=\"currency\"\n            value={ currency }\n            onChange={ this.handleForm }\n            label=\"Moeda\"\n          >\n            {\n              currencies.map((item, index) => (\n                <option key={ index } value={ item }>{item}</option>\n              ))\n            }\n          </select>\n        </label>\n        <button\n          type=\"button\"\n          onClick={ this.saveInfo }\n        >\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nFormExpenses.propTypes = {\n  currencies: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  wallet: state.wallet,\n  currencies: state.wallet.currencies,\n  idEstado: state.wallet.id,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  walletExpenses: (state) => dispatch(actionExpense(state)),\n  currenciesGlobal: () => dispatch(actionFetchCurrencies()),\n  deleteExpense: (state) => dispatch(actionDeleteExpense(state)),\n  isEdit: (isedit) => dispatch(actionIsEdit(isedit)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormExpenses);\n"]},"metadata":{},"sourceType":"module"}