{"ast":null,"code":"var _jsxFileName = \"/home/andre/trybe_projects/sd-019-c-project-trybewallet/src/components/FormExpenses.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionExpense, actionFetchCurrencies } from '../actions';\nimport fetchCurrency from '../services/Api'; // import fetchCurrency from '../services/Api';\n\nclass FormExpenses extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      await this.refreshRates();\n    };\n\n    this.handleForm = _ref => {\n      let {\n        target\n      } = _ref;\n      const {\n        name,\n        value\n      } = target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.refreshRates = async () => {\n      // const { wallet } = this.props;\n      // console.log(wallet.wallet);\n      const fetch = await fetchCurrency();\n      this.setState({\n        exchangeRates: fetch\n      });\n    };\n\n    this.saveInfo = () => {\n      // this.refreshRates();\n      // const NUMBER = 1000;\n      // Math.floor((Math.random() * NUMBER) + 1)\n      const {\n        walletExpenses\n      } = this.props;\n      walletExpenses(this.state);\n      this.setState({\n        id: 0,\n        value: 0,\n        currency: 'USD',\n        method: '',\n        tag: '',\n        description: ''\n      });\n    };\n\n    this.changeValue = value => value.toFixed(2);\n\n    const NUMBER = 1000;\n    Math.floor(Math.random() * NUMBER + 1);\n    const {\n      wallet\n    } = this.props;\n    const id = wallet.this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: '',\n      tag: '' // data: '',\n\n    };\n  }\n\n  render() {\n    const {\n      currencies\n    } = this.props;\n    const {\n      currency,\n      description,\n      value,\n      method,\n      tag\n    } = this.state;\n    const arrayTipos = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"formExpensesContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      name: \"value\",\n      \"data-testid\": \"value-input\",\n      onChange: this.handleForm,\n      value: value,\n      placeholder: \"Valor da despesa\",\n      min: \"0.00\",\n      max: \"10000000.00\",\n      step: \"0.01\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"description\",\n      \"data-testid\": \"description-input\",\n      onChange: this.handleForm,\n      value: description,\n      placeholder: \"Descri\\xE7\\xE3o da despesa\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"select\", {\n      type: \"text\",\n      name: \"method\",\n      \"data-testid\": \"method-input\",\n      onChange: this.handleForm,\n      value: method,\n      placeholder: \"M\\xE9todo de Pagamento\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, \"Escolha a forma de pagamento\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Dinheiro\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, \"Dinheiro\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Cart\\xE3o de cr\\xE9dito\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    }, \"Cart\\xE3o de cr\\xE9dito\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Cart\\xE3o de d\\xE9bito\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, \"Cart\\xE3o de d\\xE9bito\")), /*#__PURE__*/React.createElement(\"select\", {\n      type: \"text\",\n      name: \"tag\",\n      onChange: this.handleForm,\n      value: tag,\n      placeholder: \"Tipo de Despesa\",\n      \"data-testid\": \"tag-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, \"Escolha o tipo de despesa\"), arrayTipos.map((tipo, index) => /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: tipo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }\n    }, tipo))), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"coin-select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, \"Moeda:\", /*#__PURE__*/React.createElement(\"select\", {\n      \"data-testid\": \"currency-input\",\n      id: \"coin-select\",\n      name: \"currency\",\n      value: currency,\n      onChange: this.handleForm,\n      label: \"Moeda\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, currencies.map((item, index) => /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }, item)))), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.saveInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, \"Adicionar despesa\"));\n  }\n\n}\n\nFormExpenses.propTypes = {\n  currencies: PropTypes.string\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  wallet: state.wallet,\n  currencies: state.wallet.currencies\n});\n\nconst mapDispatchToProps = dispatch => ({\n  walletExpenses: state => dispatch(actionExpense(state)),\n  currenciesGlobal: () => dispatch(actionFetchCurrencies())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormExpenses);","map":{"version":3,"sources":["/home/andre/trybe_projects/sd-019-c-project-trybewallet/src/components/FormExpenses.js"],"names":["React","PropTypes","connect","actionExpense","actionFetchCurrencies","fetchCurrency","FormExpenses","Component","constructor","props","componentDidMount","refreshRates","handleForm","target","name","value","setState","fetch","exchangeRates","saveInfo","walletExpenses","state","id","currency","method","tag","description","changeValue","toFixed","NUMBER","Math","floor","random","wallet","this","render","currencies","arrayTipos","map","tipo","index","item","propTypes","string","isRequired","mapStateToProps","mapDispatchToProps","dispatch","currenciesGlobal"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionExpense, actionFetchCurrencies } from '../actions';\nimport fetchCurrency from '../services/Api';\n// import fetchCurrency from '../services/Api';\n\nclass FormExpenses extends React.Component {\n  constructor(props) {\n    super(props);\n    const NUMBER = 1000;\n    Math.floor((Math.random() * NUMBER) + 1);\n    const { wallet } = this.props;\n    const id = wallet.\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: '',\n      tag: '',\n      // data: '',\n    };\n  }\n\n  componentDidMount = async () => {\n    await this.refreshRates();\n  }\n\n  handleForm = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  refreshRates = async () => {\n    // const { wallet } = this.props;\n    // console.log(wallet.wallet);\n    const fetch = await fetchCurrency();\n    this.setState({ exchangeRates: fetch });\n  }\n\n  saveInfo = () => {\n    // this.refreshRates();\n    // const NUMBER = 1000;\n    // Math.floor((Math.random() * NUMBER) + 1)\n    const { walletExpenses } = this.props;\n    walletExpenses(this.state);\n    this.setState({\n      id: 0,\n      value: 0,\n      currency: 'USD',\n      method: '',\n      tag: '',\n      description: '',\n    });\n  }\n\n  changeValue = (value) => value.toFixed(2);\n\n  render() {\n    const { currencies } = this.props;\n    const { currency, description, value, method, tag } = this.state;\n    const arrayTipos = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    return (\n      <form className=\"formExpensesContainer\">\n        {/*\n        <input\n          type=\"date\"\n          name=\"data\"\n          onChange={ this.handleForm }\n          value={ data }\n          placeholder=\"Data\"\n        />\n        */}\n        <input\n          type=\"number\"\n          name=\"value\"\n          data-testid=\"value-input\"\n          onChange={ this.handleForm }\n          value={ value }\n          placeholder=\"Valor da despesa\"\n          min=\"0.00\"\n          max=\"10000000.00\"\n          step=\"0.01\"\n        />\n        <input\n          type=\"text\"\n          name=\"description\"\n          data-testid=\"description-input\"\n          onChange={ this.handleForm }\n          value={ description }\n          placeholder=\"Descrição da despesa\"\n        />\n        <select\n          type=\"text\"\n          name=\"method\"\n          data-testid=\"method-input\"\n          onChange={ this.handleForm }\n          value={ method }\n          placeholder=\"Método de Pagamento\"\n        >\n          <option>Escolha a forma de pagamento</option>\n          <option value=\"Dinheiro\">Dinheiro</option>\n          <option value=\"Cartão de crédito\">Cartão de crédito</option>\n          <option value=\"Cartão de débito\">Cartão de débito</option>\n        </select>\n        <select\n          type=\"text\"\n          name=\"tag\"\n          onChange={ this.handleForm }\n          value={ tag }\n          placeholder=\"Tipo de Despesa\"\n          data-testid=\"tag-input\"\n        >\n          <option>Escolha o tipo de despesa</option>\n          {\n            arrayTipos.map((tipo, index) => (\n              <option key={ index } value={ tipo }>{tipo}</option>\n            ))\n          }\n        </select>\n        <label htmlFor=\"coin-select\">\n          Moeda:\n          <select\n            data-testid=\"currency-input\"\n            id=\"coin-select\"\n            name=\"currency\"\n            value={ currency }\n            onChange={ this.handleForm }\n            label=\"Moeda\"\n          >\n            {\n              currencies.map((item, index) => (\n                <option key={ index } value={ item }>{item}</option>\n              ))\n            }\n          </select>\n        </label>\n        <button\n          type=\"button\"\n          onClick={ this.saveInfo }\n        >\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nFormExpenses.propTypes = {\n  currencies: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  wallet: state.wallet,\n  currencies: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  walletExpenses: (state) => dispatch(actionExpense(state)),\n  currenciesGlobal: () => dispatch(actionFetchCurrencies()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormExpenses);\n"]},"metadata":{},"sourceType":"module"}