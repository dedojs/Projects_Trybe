{"ast":null,"code":"var _jsxFileName = \"/home/andre/trybe_projects/sd-019-c-project-trybewallet/src/components/EditExpen.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionExpense, actionFetchCurrencies, actionIsEdit } from '../actions';\nimport fetchCurrency from '../services/Api';\n\nclass EditExpen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      await this.refreshRates();\n      const {\n        idEstado\n      } = this.props;\n      this.setState({\n        id: idEstado\n      });\n    };\n\n    this.handleForm = _ref => {\n      let {\n        target\n      } = _ref;\n      const {\n        name,\n        value\n      } = target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.refreshRates = async () => {\n      const rates = await fetchCurrency();\n      this.setState({\n        exchangeRates: rates\n      });\n    };\n\n    this.delExpense = () => {\n      const {\n        walletExpenses,\n        deleteExpense,\n        wallet\n      } = this.props;\n      const expenses = walletExpenses.filter(item => item.id !== wallet.id);\n      deleteExpense(expenses);\n    };\n\n    this.saveEditInfo = () => {\n      this.refreshRates();\n      const {\n        walletExpenses,\n        idEstado,\n        deleteExpense,\n        wallet\n      } = this.props;\n      walletExpenses(this.state);\n      actionIsEdit(false);\n      this.setState({\n        id: idEstado,\n        value: 0,\n        currency: 'USD',\n        method: '',\n        tag: '',\n        description: ''\n      }); // deleta antiga\n    };\n\n    this.changeValue = value => value.toFixed(2);\n\n    this.state = {\n      id: '',\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: '',\n      tag: '' // data: '',\n\n    };\n  }\n\n  render() {\n    const {\n      currencies\n    } = this.props;\n    const {\n      currency,\n      description,\n      value,\n      method,\n      tag\n    } = this.state;\n    const arrayTipos = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"formExpensesContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"currency\",\n      name: \"value\",\n      \"data-testid\": \"value-input\",\n      onChange: this.handleForm,\n      value: value,\n      placeholder: \"Valor da despesa\",\n      min: \"0.00\",\n      max: \"10000000.00\",\n      step: \"0.01\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"description\",\n      \"data-testid\": \"description-input\",\n      onChange: this.handleForm,\n      value: description,\n      placeholder: \"Descri\\xE7\\xE3o da despesa\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"select\", {\n      type: \"text\",\n      name: \"method\",\n      \"data-testid\": \"method-input\",\n      onChange: this.handleForm,\n      value: method,\n      placeholder: \"M\\xE9todo de Pagamento\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    }, \"Escolha a forma de pagamento\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Dinheiro\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, \"Dinheiro\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Cart\\xE3o de cr\\xE9dito\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, \"Cart\\xE3o de cr\\xE9dito\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Cart\\xE3o de d\\xE9bito\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, \"Cart\\xE3o de d\\xE9bito\")), /*#__PURE__*/React.createElement(\"select\", {\n      type: \"text\",\n      name: \"tag\",\n      onChange: this.handleForm,\n      value: tag,\n      placeholder: \"Tipo de Despesa\",\n      \"data-testid\": \"tag-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }, \"Escolha o tipo de despesa\"), arrayTipos.map((tipo, index) => /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: tipo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }\n    }, tipo))), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"coin-select\",\n      \"data-testid\": \"currency-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, \"Moeda:\", /*#__PURE__*/React.createElement(\"select\", {\n      id: \"coin-select\",\n      name: \"currency\",\n      value: currency,\n      onChange: this.handleForm,\n      label: \"Moeda\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }, currencies.map((item, index) => /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, item)))), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.saveEditInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }, \"Editar despesa\"));\n  }\n\n}\n\nEditExpen.propTypes = {\n  currencies: PropTypes.string\n}.isRequired;\n\nconst mapStateToProps = state => ({\n  currencies: state.wallet.currencies,\n  idEstado: state.wallet.id,\n  wallet: state.wallet\n});\n\nconst mapDispatchToProps = dispatch => ({\n  walletExpenses: state => dispatch(actionExpense(state)),\n  currenciesGlobal: () => dispatch(actionFetchCurrencies()),\n  actionIsEdit: isedit => dispatch(actionIsEdit(isedit))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditExpen);","map":{"version":3,"sources":["/home/andre/trybe_projects/sd-019-c-project-trybewallet/src/components/EditExpen.js"],"names":["React","PropTypes","connect","actionExpense","actionFetchCurrencies","actionIsEdit","fetchCurrency","EditExpen","Component","constructor","props","componentDidMount","refreshRates","idEstado","setState","id","handleForm","target","name","value","rates","exchangeRates","delExpense","walletExpenses","deleteExpense","wallet","expenses","filter","item","saveEditInfo","state","currency","method","tag","description","changeValue","toFixed","render","currencies","arrayTipos","map","tipo","index","propTypes","string","isRequired","mapStateToProps","mapDispatchToProps","dispatch","currenciesGlobal","isedit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionExpense, actionFetchCurrencies, actionIsEdit } from '../actions';\nimport fetchCurrency from '../services/Api';\n\nclass EditExpen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: '',\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: '',\n      tag: '',\n      // data: '',\n    };\n  }\n\n  componentDidMount = async () => {\n    await this.refreshRates();\n    const { idEstado } = this.props;\n    this.setState({ id: idEstado });\n  }\n\n  handleForm = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  refreshRates = async () => {\n    const rates = await fetchCurrency();\n    this.setState({ exchangeRates: rates });\n  }\n\n  delExpense = () => {\n    const { walletExpenses, deleteExpense, wallet } = this.props;\n    const expenses = walletExpenses.filter((item) => item.id !== wallet.id);\n    deleteExpense(expenses);\n  }\n\n  saveEditInfo = () => {\n    this.refreshRates();\n    const { walletExpenses, idEstado, deleteExpense, wallet } = this.props;\n    walletExpenses(this.state);\n    actionIsEdit(false);\n    this.setState({\n      id: idEstado,\n      value: 0,\n      currency: 'USD',\n      method: '',\n      tag: '',\n      description: '',\n    });\n    // deleta antiga\n    \n  }\n\n  changeValue = (value) => value.toFixed(2);\n\n  render() {\n    const { currencies } = this.props;\n    const { currency, description, value, method, tag } = this.state;\n    const arrayTipos = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    return (\n      <form className=\"formExpensesContainer\">\n        {/*\n        <input\n          type=\"date\"\n          name=\"data\"\n          onChange={ this.handleForm }\n          value={ data }\n          placeholder=\"Data\"\n        />\n        */}\n        <input\n          type=\"currency\"\n          name=\"value\"\n          data-testid=\"value-input\"\n          onChange={ this.handleForm }\n          value={ value }\n          placeholder=\"Valor da despesa\"\n          min=\"0.00\"\n          max=\"10000000.00\"\n          step=\"0.01\"\n        />\n        <input\n          type=\"text\"\n          name=\"description\"\n          data-testid=\"description-input\"\n          onChange={ this.handleForm }\n          value={ description }\n          placeholder=\"Descrição da despesa\"\n        />\n        <select\n          type=\"text\"\n          name=\"method\"\n          data-testid=\"method-input\"\n          onChange={ this.handleForm }\n          value={ method }\n          placeholder=\"Método de Pagamento\"\n        >\n          <option>Escolha a forma de pagamento</option>\n          <option value=\"Dinheiro\">Dinheiro</option>\n          <option value=\"Cartão de crédito\">Cartão de crédito</option>\n          <option value=\"Cartão de débito\">Cartão de débito</option>\n        </select>\n        <select\n          type=\"text\"\n          name=\"tag\"\n          onChange={ this.handleForm }\n          value={ tag }\n          placeholder=\"Tipo de Despesa\"\n          data-testid=\"tag-input\"\n        >\n          <option>Escolha o tipo de despesa</option>\n          {\n            arrayTipos.map((tipo, index) => (\n              <option key={ index } value={ tipo }>{tipo}</option>\n            ))\n          }\n        </select>\n        <label htmlFor=\"coin-select\" data-testid=\"currency-input\">\n          Moeda:\n          <select\n            id=\"coin-select\"\n            name=\"currency\"\n            value={ currency }\n            onChange={ this.handleForm }\n            label=\"Moeda\"\n          >\n            {\n              currencies.map((item, index) => (\n                <option key={ index } value={ item }>{item}</option>\n              ))\n            }\n          </select>\n        </label>\n        <button\n          type=\"button\"\n          onClick={ this.saveEditInfo }\n        >\n          Editar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nEditExpen.propTypes = {\n  currencies: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  idEstado: state.wallet.id,\n  wallet: state.wallet,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  walletExpenses: (state) => dispatch(actionExpense(state)),\n  currenciesGlobal: () => dispatch(actionFetchCurrencies()),\n  actionIsEdit: (isedit) => dispatch(actionIsEdit(isedit)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditExpen);\n"]},"metadata":{},"sourceType":"module"}